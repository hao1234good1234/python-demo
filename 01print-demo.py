"""
基本语法 print()、注释、缩进规则 Python 的“书写规范
"""

'''
1. `print()` —— 让程序“说话”
'''
# 输出字符串（用英文双引号 `"` 或单引号 `'` 包裹）
print("Hello, World!")
print('你好')
print(12345)
print(3.12)
# 输出布尔值（注意：`True` 首字母大写）
print(True)
print(False)
# 输出多个内容，用逗号 `,` 分隔，自动加空格
print("年龄:", 19)
print("姓名:", "小明")
print("是否学生:", True)
# 用 `f-string`（格式化字符串）更灵活
name = "小红"
age = 18
print(f"我叫{name}, 今年{age}岁")


'''
2. 注释 —— 给代码写“说明书”
'''
# 好的注释解释“**为什么**”，而不是“**做什么**”

# (1) 单行注释：用 `#`
# 这是一条注释，不会运行
print("Hello")  # 这行代码会输出 Hello


# (2) 多行注释：用三个引号 `'''` 或 `"""`（其实本质是字符串，但常被用作注释）
#注意：Python 没有真正的“多行注释语法”！
# '''...''' 或 """...""" 本质是多行字符串，只是因为没被赋值或使用，Python 会忽略它，所以被当作注释用。

'''
这是多行注释的例子
可以写很多行
python都会忽略它
'''

"""
也可以用双引号
这是函数或模块的文档字符串
"""

# (3) 这是 Python 官方推荐的函数、类、模块说明方式，不是普通注释！
# 特点：
# 必须用 """..."""（双三引号）
# 写在函数/类/模块的第一行
# 可被 help() 函数读取
# 支持自动生成文档（如 Sphinx、VS Code 提示）

def calculate_area(length, width):
    """
    计算矩形面积

    参数：
        length (float): 长度
        width (float): 宽度
    
    返回：
        float: 面积
    """
    return length * width
# 使用 help() 查看文档字符串
help(calculate_area)

# 最佳实践：
# 函数、类、模块都写 docstring
# 普通逻辑解释用 # 单行注释
# 不要用 \''' 写 docstring（虽然能用，但 PEP257 推荐 \"""）


# 最佳实践建议:
# 日常写代码：多用 # 单行注释，简洁明了。
# 写函数/类：一定要写 """docstring"""，方便自己和他人理解。
# 调试时：用 Ctrl + / 快速注释/取消代码。
# 不要滥用多行字符串当注释：它不是标准注释语法，可能被误认为是未使用的字符串（某些代码检查工具会警告）


# vscode 快捷键：
# 单行注释 / 取消注释	Ctrl + /
# 多行注释（选中多行后）	Ctrl + /（每行加 #）

'''
3. 缩进规则 —— Python 的“灵魂”
'''
# Python 用缩进（空格或 Tab）表示代码块，而不是像其他语言用 `{}` 或 `begin/end`

if 5 > 4:
    print("5 大于 4")
    print("这是if里面的代码")
print("这是if外面的代码")

# | 规则                      | 说明                                                         |
# | ------------------------- | ------------------------------------------------------------ |
# | **必须缩进**              | 在 `if`、`for`、`while`、`def`、`class` 等语句后，下一行必须缩进 |
# | **缩进量一致**            | 同一个代码块内，所有行缩进空格数必须相同（推荐 **4 个空格**） |
# | **不要混用 Tab 和空格**   | VS Code 默认用空格，建议统一用 **4 空格**（PEP8 标准）       |
# | **取消缩进 = 退出代码块** | 回到上一级缩进，就表示代码块结束                             |


print("======开始循环=======")
for i in range(3):
    print("外层循环:", i)
    if i == 1:
        print("    这是内层if")
        print("    仍然在if里")
    print("回到for循环")
print("======结束循环=======")

