"""
元组就像是 **“不可变的列表”**：它用起来像列表，但一旦创建，就不能增、删、改
"""
# 📦 一、什么是元组（tuple）？ 
# 特点
# - **有序**：元素有固定顺序（支持索引和切片）
# - **不可变（immutable）**：创建后不能增、删、改元素
# 如果元组包含**可变对象**（如列表），**内部对象仍可变**！例如：元组包含列表（“不可变外壳，可变内核”）
# - **可嵌套 & 异构**：可以包含不同类型，甚至嵌套其他元组或列表
#  数据可以重复

# ✅ 为什么需要元组？
# - 表示**不会改变的数据**（如坐标、RGB颜色、数据库记录）
# - 作为**字典的键**（列表不能做键，元组可以！）
# - 函数**返回多个值**时默认用元组

# 二、创建元组
# 基本语法：用 **圆括号 `()`**
# 空元组
empty = ()
# 单个元素(注意逗号！ )
single = (42,)    # ✅ 必须加逗号，否则是整数
not_tuple = (42)   # ❌ 这是整数 42
print(type(single))  # 类型是 <class 'tuple'>
print(type(not_tuple))  # 类型是 <class 'int'>
# 多个元素
point = (3, 5)
rgb = (255, 0, 0)
person = ("zhangsan", 23, "北京")
print(point, rgb, person)
# 🔸 **关键规则**：  
# - 元组靠 **逗号 `,`** 定义，不是括号！  
# - 括号在多数情况下可省略（但建议保留，提高可读性）
# ✅ 示例（无括号也行）：
# coords = 10, 20    # 自动变成元组 (10, 20)
# x, y = coords      # 解包（后面会讲）

# 三、访问元组元素（和列表几乎一样！）
colors = (255, 128, 0)
print(colors[0])  # 255
print(colors[-1])  # 0（最后一个）
print(colors[1:3])  # (128, 0)（切片） 

#遍历
for value in colors:
    print(value)
# ⚠️ 但你**不能修改**：
# colors[0] = 0  # ❌ 报错！TypeError: 'tuple' object does not support item assignment

# 🧩 四、元组的常用操作（只读操作）

# | 操作             | 说明       | 示例                                             |
# | ---------------- | ---------- | ------------------------------------------------ |
# | `len(tuple)`     | 长度       | `len((1,2,3)) → 3`                               |
# | `x in tuple`     | 成员判断   | `2 in (1,2,3) → True`                            |
# | `tuple.index(x)` | 查找索引   | `(10,20,30).index(20) → 1`                       |
# | `tuple.count(x)` | 统计次数   | `(1,1,2).count(1) → 2`                           |
# | `+` / `*`        | 合并或重复 | `(1,2) + (3,) → (1,2,3)`<br>`(1,) * 3 → (1,1,1)` |

t1 = (1, 2)
t2 = (3, 4)
t3 = t1 + t2
t4 = t1 * 3
print(t3)
print(t4)

# 五、元组 vs 列表：核心区别
# | 特性             | 元组（tuple）          | 列表（list）           |
# | ---------------- | ---------------------- | ---------------------- |
# | **可变性**       | ❌ 不可变               | ✅ 可变                 |
# | **语法**         | `()` 或无括号          | `[]`                   |
# | **性能**         | 更快、内存更小         | 稍慢                   |
# | **用途**         | 表示**固定结构**的数据 | 表示**动态变化**的数据 |
# | **能否做字典键** | ✅ 可以                 | ❌ 不可以               |

# 元组：表示一个不会变的点
origin = (0, 0)
# 列表：表示可变的路径点
path = [(1, 0), (2, 3), (6, 19)]
path.append((12, 6)) 

# 六、元组的高级技巧
# 1. **元组解包（Unpacking）** —— 超实用！

# 把元组的值拆开赋值给多个变量
point = (10, 20)
x, y = point
print(x, y)

# 函数返回多个值，本质是返回一个元组
def get_name_age():
    return "小明", 18  # 实际返回 ("李四", 30)
name, age = get_name_age()
print(f"{name}今年{age}岁")

# 2. 用 `*` 收集剩余元素
numbers = (1, 2, 3, 4, 5)
a, *rest, b = numbers
print(a)  # 1
print(rest)  # [2, 3, 4] （注意：rest 是列表！）
print(b) # 5

# 3. **交换变量（无需临时变量）*
a, b = (10, 20)
a, b = b, a
print(a, b)  # 20 10

# 4. **作为字典的键**
# ✅ 元组可以做键（因为不可变） 
locations = {
    (0, 0): "起点",
    (1, 1): "宝藏",
    (2, 3): "终点"
}
print(locations[(1, 1)])  # 宝藏

# 七、常见的误区
# | 误区             | 正确理解                                                 |
# | ---------------- | -------------------------------------------------------- |
# | “元组完全不能变” | 如果元组包含**可变对象**（如列表），**内部对象仍可变**！ |
# | `(42)` 是元组    | 必须写成 `(42,)` 才是单元素元组                          |
# | 元组没用         | 元组在函数返回、数据结构、性能优化中非常关键！           |

# ✅ 示例：元组包含列表（“不可变外壳，可变内核”）
t = ([1, 2], "hello python")
t[0].append(3)
print(t)  # 输出：([1, 2, 3], 'hello python')

# t[0] = [4, 5]   # ❌ 不能替换整个元素！

# 八、实战场景
# 场景1：函数返回多个值
def divide(a, b):
    quotient = a // b
    remainder = a % b
    return quotient, remainder # 返回元组
q, r = divide(10, 3)
print(f"10 / 3 = {q} 余 {r}")  # 输出：10 / 3 = 3 余 1

# 场景2： 数据库记录 （模拟）
# 每条记录是一个元组，（id，name， age）
users = [
    (1, "zhangsan", 30),
    (2, "lisi", 29)
]
for uid, name, age in users:
    print(f"用户{name}(ID: {uid})的年龄是{age}")

'''
动手练习
'''

# 练习1.创建并访问
color = (255, 128, 0)
print(f"R: {color[0]}, G: {color[1]}, B: {color[2]}")

# 练习2.解包
coordinates = (3.5, -2.1)
x, y = coordinates
print(f"点坐标是：({x}, {y})")

# 练习3.判断成员
data = ("apple", "banana", "cherry")
if "banana" in data:
    print("找到了香蕉")
#练习4.元组做字典键
menu = {
    ("早餐", "周一"): "牛奶 + 面包",
    ("早餐", "周二"): "豆浆 + 油条"
}
print(menu[("早餐", "周一")])  

# 十、何时用元组？何时用列表？

# | 用元组（tuple）                  | 用列表（list）                       |
# | -------------------------------- | ------------------------------------ |
# | 数据**不会改变**（如配置、坐标） | 数据**会动态变化**（如购物车、日志） |
# | 表示**结构化记录**（如数据库行） | 表示**同类型集合**（如成绩列表）     |
# | 需要作为**字典的键**             | 不需要做键                           |
# | 函数**返回多个值**               | 需要频繁增删改                       |

# ✅ **经验法则**：  
# **“不确定用哪个？先用元组。如果需要修改，再换成列表。”**